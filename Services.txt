Services in Angular
===================

Angular Services perform tasks that are used by multiple components. These tasks could be data and image fetching, network connections, and database management among others. They perform all the operational tasks for the components and avoid rewriting of code. A service can be written once and injected into all the components that use that service. 

A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.
Angular distinguishes components from services to increase modularity and reusability.

A component should use services for tasks that don't involve the view or application logic. Services are good for tasks such as fetching data from the server, validating user input, or logging directly to the console. 
By defining such processing tasks in an injectable service class, you make those tasks available to any component. You can also make your application more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.

ng generate service servicename

Angular takes this service as any other Angular class, so to make sure Angular counts it as a service, we have to register it. It is also important to note the hierarchical way Angular handles things like dependency injection. Anywhere you register your service, dependencies can only be injected into the said component or the child nodes.
---------------------
If you write all the business logic in components, you will have the following problems:

You will not be able to reuse that logic anywhere else and you will have to re-code the entire logic in the target component.
Your components will become hard to maintain as you will have to maintain two copies of the same code.
So, if you wrap your business logic in a reusable Angular service, you will not only keep your components clean but also get the benefits of reusability and maintainability.
------------------------
If any component method has logic that goes beyond ten lines of code, it should be considered a candidate to be wrapped in a reusable Angular service. Always make sure to decorate your service class with the @Injectable() decorator so that when you inject any other service in this service, you don't get an error.

---------------

There are two ways to register a service in the providers array of any module:

Longhand method
Shorthand method
Longhand Method
In the longhand method, you register an object with two properties, provide and useValue, in the providers array of any module,

 providers: [ 
              {
                provide: EventService,
                useValue: EventService
              }
              ],
Shorthand Method
In the shorthand method, you specify the name of your service class in the providers array in your module
providers: [ 
              EventService
              ],

No matter how many components you try to consume a service in, Angular creates only one instance of the service. So, Angular services by default are singletons. This helps services to establish communication between two or more components.